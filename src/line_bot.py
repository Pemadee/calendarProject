import asyncio
import os
import sys
import threading
from dotenv import load_dotenv
from fastapi import BackgroundTasks, FastAPI, Request, Response, HTTPException
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction
)
from apscheduler.schedulers.background import BackgroundScheduler
import uvicorn
import requests
from datetime import datetime, time
import time as t 
from typing import Dict, List, Any

app = FastAPI()
from api.endpoints import *
load_dotenv()


scheduler = BackgroundScheduler()
scheduler.start()

user_sessions = {}
base_url = os.getenv("BASE_URL")



# Available dates for meeting scheduling
available_dates = ["23/4/2568", "24/4/2568", "25/4/2568", "26/4/2568", "27/4/2568", "28/4/2568", "29/4/2568"]

# Experience options
exp_options = ["Strong exp", "Non - strong exp"]

# English level options
eng_level_options = ["‡∏£‡∏∞‡∏î‡∏±‡∏ö 4", "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5"]

# Location options
location_options = ["Silom", "Asoke", "Phuket", "Pattaya", "Samui", "Huahin", "Chiangmai"]

# User session data
user_sessions = {}

# Configuration for data API service
base_url = os.getenv("BASE_URL")# Data service URL


@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text
    
    # Create session for new users if not exist
    if user_id not in user_sessions:
        user_sessions[user_id] = {"state": "initial"}
    
    # Get current session
    session = user_sessions[user_id]
    
    # Universal cancel command
    if text == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        session.clear()
        session["state"] = "initial"
        send_initial_options(event.reply_token)
        return
    
    # Initial state or any unknown message
    if session["state"] == "initial" or text not in ["‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ"] and session["state"] not in ["profile_age", "profile_exp", "profile_eng_level", "profile_location", "profile_confirm", "select_date", "select_time_slot", "confirm","meeting_name","meeting_description","meeting_summary"]:
        session["state"] = "waiting_initial_choice"
        send_initial_options(event.reply_token)
        return
    
    # Handle quick reply selection for initial options
    elif session["state"] == "waiting_initial_choice":
        if text == "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager":
            session["state"] = "profile_age"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏")
            )
        elif text == "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ":
            usage_text = "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager\" ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å\""
            
            # Send usage info with quick reply to start again
            items = [
                QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager", text="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager"))
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=usage_text, quick_reply=quick_reply)
            )
            
            # Keep state as waiting_initial_choice
            session["state"] = "waiting_initial_choice"
        else:
            # If user enters something else while waiting for choice
            send_initial_options(event.reply_token)
    
    # ================= PROFILE FLOW =================
    # Age input
    elif session["state"] == "profile_age":
        try:
            age = int(text)
            session["age"] = age
            session["state"] = "profile_exp"
            
            # Send experience options as quick reply
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in exp_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå",
                    quick_reply=quick_reply
                )
            )
        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            )
    
    # Experience input
    elif session["state"] == "profile_exp":
        if text in exp_options:
            session["exp"] = text
            session["state"] = "profile_eng_level"
            
            # Send English level options as quick reply
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in eng_level_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                    quick_reply=quick_reply
                )
            )
        else:
            # Send experience options as quick reply again
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in exp_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )
    
    # English level input
    elif session["state"] == "profile_eng_level":
        if text in eng_level_options:
            session["eng_level"] = text
            session["state"] = "profile_location"
            
            # Send location options as quick reply
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in location_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
                    quick_reply=quick_reply
                )
            )
        else:
            # Send English level options as quick reply again
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in eng_level_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )




































    # Location input
    elif session["state"] == "profile_location":
        if text in location_options:
            session["location"] = text
            session["state"] = "profile_confirm"

            # ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Profile ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            profile_summary = create_profile_summary(session)

            items = [
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")),
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
            ]
            quick_reply = QuickReply(items=items)

            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n{profile_summary}\n\n‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                    quick_reply=quick_reply
                )
            )

        else:
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in location_options
            ]
            quick_reply = QuickReply(items=items)

            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )








































    # ================= MEETING SCHEDULING FLOW =================
    # Date selection
    elif session.get("state") == "profile_confirm":
        print("üî• Enter profile_confirm branch")
        if text == "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
            )

            def background_post_and_push(user_id, session_data):
                try:
                    profile_json = {
                        "location": session_data.get("location"),
                        "english_min": 5 if session_data.get("eng_level") == "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5" else 4,
                        "exp_kind": "strong" if session_data.get("exp") == "Strong exp" else "non",
                        "age_key": str(session_data.get("age")),
                        "start_date": datetime.now().strftime("%Y-%m-%d"),
                        "time_period": "7"
                    }
                    # print("üöÄ Background Started with data:", profile_json)

                    response = requests.post(
                        f"{base_url}/events/availableMR",
                        json=profile_json,
                        timeout=30
                    )
                    response.raise_for_status()
                    print("‚úÖ POST ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.json())

                    line_bot_api.push_message(
                        user_id,
                        TextSendMessage(text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°")
                    )
                    send_date_selection(user_id)

                except Exception as e:
                    print(f"‚ùå Background Error: {e}")
                    line_bot_api.push_message(
                        user_id,
                        TextSendMessage(text="‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                    )

            scheduler.add_job(
                func=background_post_and_push,
                args=[user_id, session.copy()],
                trigger="date",
                run_date=datetime.now() + timedelta(seconds=2)
            )

        elif text == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
            session.clear()
            session["state"] = "initial"
            send_initial_options(event.reply_token)

        else:
            items = [
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")),
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
            ]
            quick_reply = QuickReply(items=items)

            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )
      



    # Time slot selection
    elif session["state"] == "select_time_slot":
        try:
            slot_number = int(text.strip("()"))
            if 1 <= slot_number <= len(session["available_slots"]):
                selected_slot = session["available_slots"][slot_number - 1]
                session["selected_slot"] = selected_slot
                session["state"] = "confirm"
                
                
                # Summary of meeting
                summary = create_meeting_summary(
                    session["selected_date"],
                    selected_slot["time"],
                    selected_slot["participants"]
                )
                
                # Send confirmation message with quick reply
                send_meeting_confirmation(event.reply_token, summary)

                
            else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ")
                )

        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            )
    
    # Meeting confirmation
    elif session["state"] == "confirm":
        if text == "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î":
            session["state"] = "meeting_name"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° : ")
            )
            
        elif text == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î":
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            )
            # Reset state but keep profile information
            profile_data = {k: session[k] for k in ["age", "exp", "eng_level", "location"] if k in session}
            session.clear()
            session.update(profile_data)
            session["state"] = "initial"
            session["profile_completed"] = True
            
            # Show initial options again
            send_initial_options(user_id)
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î)")
            )
            
    elif session["state"] == "meeting_name":
        session["meeting_name"] = text
        session["state"] = "meeting_description"
        print(session["meeting_name"])
        line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏° : ")
            )
    elif session["state"] == "meeting_description":
        session["meeting_description"] = text
        session["state"] = "meeting_summary"
        print(session["meeting_description"])
        meeting_data = {
                    "name": session["meeting_name"],
                    "description": session["meeting_description"],
                    "date": session["selected_date"],
                    "time": session["selected_slot"]["time"],
                    "participants": session["selected_slot"]["participants"],
                    "created_by": user_id,
                }
        start_time = t.time()
            #‡∏•‡∏∏‡∏á‡πÄ‡∏≠
        response = requests.post(
                f"{base_url}/create_meeting",
                json=meeting_data,
                timeout=3
            )
        elapsed_time = t.time() - start_time
        print(f"Request took {elapsed_time:.3f} seconds")
        if response.status_code == 200:
                meeting_info = response.json().get("meeting", {})
                #‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö json ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                # {
                #     "status": "success",
                #     "meeting": {
                #         "date": "01/05/2567",
                #         "time": "10:00",
                #         "duration": "30 ‡∏ô‡∏≤‡∏ó‡∏µ",
                #         "participants": [...],
                #         "created_at": "25/04/2025 23:08:31",
                #         "created_by": "Uxxxxxxxxxxxx"
                #     }
                #     }
                # Send confirmation message
                meeting_confirmation = create_meeting_confirmation(meeting_info)
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text=meeting_confirmation)
                )
        else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢")
                )
            
                # Reset state but keep profile information
                profile_data = {k: session[k] for k in ["age", "exp", "eng_level", "location"] if k in session}
                session.clear()
                session.update(profile_data)
                session["state"] = "initial"
                session["profile_completed"] = True
                
                # Show initial options again after a delay
                user_sessions[user_id] = {"state": "initial"}
                

 

def send_initial_options(reply_token_or_user_id):
    """Send initial options with Quick Reply"""
    items = [
        QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager", text="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager")),
        QuickReplyButton(action=MessageAction(label="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ", text="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ"))
    ]
    
    quick_reply = QuickReply(items=items)
    
    message = TextSendMessage(
        text="‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ line chat ‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á",
        quick_reply=quick_reply
    )
    
    # Handle both reply_token and user_id
    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        # It's a user_id
        line_bot_api.push_message(reply_token_or_user_id, message)
        if reply_token_or_user_id in user_sessions:
            user_sessions[reply_token_or_user_id]["state"] = "waiting_initial_choice"
    else:
        # It's a reply_token
        line_bot_api.reply_message(reply_token_or_user_id, message)

@handler.add(MessageEvent)
def catch_all_message(event):
    print("üõé Event received:", event)

    # ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏ß‡πà‡∏≤ event.message.type ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
    if hasattr(event, 'message') and hasattr(event.message, 'type'):
        print("üõé Event message type:", event.message.type)

def send_date_selection(reply_token_or_user_id):
    """Send Quick Reply for date selection"""
    items = [
        QuickReplyButton(action=MessageAction(label=date, text=date))
        for date in available_dates[:7]  # Limit to 7 quick replies due to Line's limit
    ]
    
    quick_reply = QuickReply(items=items)
    
    message = TextSendMessage(
        text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
        quick_reply=quick_reply
    )
    
    # Handle both reply_token and user_id
    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        # It's a user_id
        line_bot_api.push_message(reply_token_or_user_id, message)
    else:
        # It's a reply_token
        line_bot_api.reply_message(reply_token_or_user_id, message)

def send_time_slots(reply_token, available_slots):
    """Send available time slots"""
    # Create message with available time slots
    slot_texts = []

    for i, slot in enumerate(available_slots, start=1):
        participants_text = "\n   " + "\n   ".join(f"-{p}" for p in slot["participants"])
        slot_text = f"{i}. ‡πÄ‡∏ß‡∏•‡∏≤ {slot['time']}{participants_text}"
        slot_texts.append(slot_text)

    message_text = f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:\n\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : {slot['date']}\n" + "\n".join(slot_texts)
    
    # Show quick reply for time slot selection (max 13 items due to Line's limit)
    items = [
        QuickReplyButton(action=MessageAction(label=f"({i})", text=f"({i})"))
        for i in range(1, min(len(available_slots) + 1, 14))
    ]
    
    # Add cancel option
    items.append(QuickReplyButton(action=MessageAction(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")))
    
    quick_reply = QuickReply(items=items)
    
    line_bot_api.reply_message(
        reply_token,
        TextSendMessage(text=message_text, quick_reply=quick_reply)
    )

def send_meeting_confirmation(reply_token, summary):
    """Send meeting confirmation with Quick Reply options"""
    
    items = [
        QuickReplyButton(action=MessageAction(label="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î", text="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î")),
        QuickReplyButton(action=MessageAction(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î", text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î"))
    ]
    
    quick_reply = QuickReply(items=items)
    
    confirmation_message = f"‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:\n{summary}\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"
    
    line_bot_api.reply_message(
        reply_token,
        TextSendMessage(text=confirmation_message, quick_reply=quick_reply)
    )

def create_profile_summary(session):
    """Create profile summary message"""
    summary = f"‡∏≠‡∏≤‡∏¢‡∏∏: {session.get('age')}\n"
    summary += f"‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå: {session.get('exp')}\n"
    summary += f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: {session.get('eng_level')}\n"
    summary += f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {session.get('location')}"
    
    return summary

def create_meeting_summary(date, time_slot, participants):
    """Create meeting summary message"""
    summary = f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : {date}\n"
    summary += f"‡πÄ‡∏ß‡∏•‡∏≤ : {time_slot}\n"
    summary += "‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° :\n"
    
    for participant in participants:
        summary += f"-{participant}\n"
    
    return summary

def create_meeting_confirmation(meeting_info):
    """Create confirmation message when meeting is successfully created"""
    confirmation = f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n\n"
    confirmation += f"üìç ‡∏ä‡∏∑‡πà‡∏≠ : {meeting_info['name']}\n"
    confirmation += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : {meeting_info['date']}\n"
    confirmation += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤ : {meeting_info['time']}\n"
    confirmation += f"‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ : {meeting_info['duration']}\n"
    confirmation += f"üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : {meeting_info['description']}\n"
    confirmation += "üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° :\n"
    
    for participant in meeting_info['participants']:
        confirmation += f"    - {participant}\n"
    
    confirmation += f"\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ : {meeting_info['created_at']}\n\n"
    confirmation += "‡∏à‡∏≠‡∏á‡∏ö‡∏ô google calendar ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    return confirmation

# if __name__ == "__main__":
#     uvicorn.run("line_bot:app", host="localhost", port=8001, reload=True)