import os
import re
import threading
from dotenv import load_dotenv
from fastapi import FastAPI, Request, Response, HTTPException
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    QuickReply, QuickReplyButton, MessageAction
)
import urllib
import uvicorn
import requests
from datetime import datetime, time, timedelta
import time as t 
from typing import Dict, List, Any
from apscheduler.schedulers.background import BackgroundScheduler
from api.endpoints import *
from models.schemas import BulkEventRequest
from linebot.models import TemplateSendMessage, ButtonsTemplate, URIAction
from linebot.models import FlexSendMessage


app = FastAPI()

load_dotenv()
scheduler = BackgroundScheduler()
scheduler.start()

# User session data
user_sessions = {}

# Configuration for data API service
base_url = os.getenv("BASE_URL")


@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text
    
    # Create session for new users if not exist
    if user_id not in user_sessions:
        user_sessions[user_id] = {"state": "initial"}
    
    # Get current session
    session = user_sessions[user_id]
    
    # Universal cancel command
    if text == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        session.clear()
        session["state"] = "initial"
        send_initial_options(event.reply_token)
        return

    # ‚úÖ ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å if ‚Üí elif ‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    elif text not in ["‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager", "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ", "login(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Manager & Recruiter)"] and session["state"] not in [
        "profile_age", "profile_exp", "profile_eng_level", "profile_location",
        "profile_confirm", "select_date", "select_time_slot", "select_pair",
        "confirm", "meeting_name", "meeting_description", "meeting_summary", "login_email"
    ]:
        session["state"] = "initial"
        send_initial_options(event.reply_token)
        return

    # ‡πÅ‡∏Å‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 87
    elif session["state"] == "initial":  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å waiting_initial_choice ‡πÄ‡∏õ‡πá‡∏ô initial
        if text == "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager":
            session["state"] = "profile_age"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏")
            )
        elif text == "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ":
            usage_text = "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager\" ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏≤‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÉ‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏∂‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå \"‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å\""
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=usage_text)
            )
            session.clear()
            session["state"] = "initial"
            send_menu_only(user_id)

            return
        elif text == "login(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Manager & Recruiter)":          
            session["state"] = "login_email"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (example@company.com)")
            )
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà
            send_initial_options(event.reply_token)

    elif session["state"] == "login_email":  
        def background_login_and_push(user_id, user_email):
            """‡∏î‡∏∂‡∏á events ‡πÉ‡∏ô background ‡πÅ‡∏•‡πâ‡∏ß push ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
            try:
                resp = requests.get(
                    f"{base_url}/events/{user_email}",
                    allow_redirects=False,
                    timeout=30
                )

                # ===== Auth required =====
                if resp.status_code in (302, 307) and "location" in resp.headers:
                    original_auth_url = resp.headers["location"]
    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå mobile=true
                    if "?" in original_auth_url:
                        auth_url = original_auth_url + "&mobile=true"
                    else:
                        auth_url = original_auth_url + "?mobile=true"
                    
                    message_text = (
                        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Calendar\n\n"
                        "üì± ‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î 403:\n"
                        "‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å'\n\n"
                        f"{auth_url}"
                    )
                    
                    line_bot_api.push_message(
                        user_id,
                        TextSendMessage(text=message_text)
                    )
                                            # reset session
                    session.clear()
                    session["state"] = "initial"
                    send_menu_only(user_id)
                    return

                # ===== Got events =====
                if resp.status_code == 200:
                    line_bot_api.push_message(user_id, TextSendMessage(text=f"‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"))
                                            # reset session
                    session.clear()
                    session["state"] = "initial"
                    send_menu_only(user_id)
                else:
                    line_bot_api.push_message(
                        user_id,
                        TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (status {resp.status_code}) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                    )
                                            # reset session
                    session.clear()
                    session["state"] = "initial"
                    send_menu_only(user_id)

            except Exception as e:
                print("‚ùå login error:", e)
                line_bot_api.push_message(
                    user_id,
                    TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô: {e}")
                )
                                        # reset session
                session.clear()
                session["state"] = "initial"
                send_menu_only(user_id)

        def background_login_and_push(user_id, user_email):
                        """‡∏î‡∏∂‡∏á events ‡πÉ‡∏ô background ‡πÅ‡∏•‡πâ‡∏ß push ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"""
                        try:
                            resp = requests.get(
                                f"{base_url}/events/{user_email}",
                                allow_redirects=False,
                                timeout=30                # ‡∏¢‡∏∑‡∏î timeout ‡πÉ‡∏´‡πâ‡πÄ‡∏¢‡∏≠‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô
                            )

                            # ===== Auth required =====
                            if resp.status_code in (302, 307) and "location" in resp.headers:
                                auth_url = resp.headers["location"]
                                line_bot_api.push_message(
                                    user_id,
                                    TextSendMessage(text=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ\n{auth_url}")
                                )
                                return
                            # ===== Got events =====
                            if resp.status_code == 200:
                                data = resp.json()
                                events = data.get("events", [])
                                if events:
                                    lines = [f"üìÖ ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á {user_email} (7 ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ)"]
                                    for ev in events[:10]:
                                        lines.append(f"‚Ä¢ {ev['start']} ‚ñ∂ {ev['summary']}")
                                    reply_text = "\n".join(lines)
                                    
                                else:
                                    reply_text = f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° 7 ‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á {user_email}"
                                    # reset session
                                    session.clear()
                                    session["state"] = "initial"
                                    send_menu_only(user_id)
                                line_bot_api.push_message(user_id, TextSendMessage(text=f"‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n\n{reply_text}"))
                                # reset session
                                session.clear()
                                session["state"] = "initial"
                                send_menu_only(user_id)
                            else:
                                line_bot_api.push_message(
                                    user_id,
                                    TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (status {resp.status_code}) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                                )
                                                # reset session
                                session.clear()
                                session["state"] = "initial"
                                send_menu_only(user_id)

                        except Exception as e:
                            print("‚ùå login error:", e)
                            line_bot_api.push_message(
                                user_id,
                                TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô: {e}")
                            )
                            session.clear()
                            session["state"] = "initial"
                            send_menu_only(user_id)

        email_pattern = r"^[\w\.-]+@[\w\.-]+\.\w{2,}$"
        if re.match(email_pattern, text):
            user_email = text.strip()

            # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
            )

            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á
            scheduler.add_job(
                func=background_login_and_push,
                args=[user_id, user_email],
                trigger="date",
                run_date=datetime.now() + timedelta(seconds=1)
            )

            # reset session
            # session.clear()
            # session["state"] = "initial"
            # send_menu_only(user_id)
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
            )
            
            # reset session
            session.clear()
            session["state"] = "initial"
            send_menu_only(user_id)
                         
            email_pattern = r"^[\w\.-]+@[\w\.-]+\.\w{2,}$"
            if re.match(email_pattern, text):
                user_email = text.strip()

                # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
                )

                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏â‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á
                scheduler.add_job(
                    func=background_login_and_push,
                    args=[user_id, user_email],
                    trigger="date",
                    run_date=datetime.now() + timedelta(seconds=1)
                )


            else:
                
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")
                )
                session.clear()
                session["state"] = "initial"
                send_menu_only(user_id)

    # ================= PROFILE FLOW =================
    # Age input
    elif session["state"] == "profile_age":
        try:
            age = int(text)
            session["age"] = age
            session["state"] = "profile_exp"
            
            # Experience options
            exp_options = ["Strong exp", "Non - strong exp"]
            
            # Send experience options as quick reply
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in exp_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå",
                    quick_reply=quick_reply
                )
            )
        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            )
    
    # Experience input
    elif session["state"] == "profile_exp":
        # Experience options
        exp_options = ["Strong exp", "Non - strong exp"]
        
        if text in exp_options:
            session["exp"] = text
            session["state"] = "profile_eng_level"
            
            # English level options
            eng_level_options = ["‡∏£‡∏∞‡∏î‡∏±‡∏ö 4", "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5"]
            
            # Send English level options as quick reply
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in eng_level_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©",
                    quick_reply=quick_reply
                )
            )
        else:
            # Send experience options as quick reply again
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in exp_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )
    
    # English level input
    elif session["state"] == "profile_eng_level":
        # English level options
        eng_level_options = ["‡∏£‡∏∞‡∏î‡∏±‡∏ö 4", "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5"]
        
        if text in eng_level_options:
            session["eng_level"] = text
            session["state"] = "profile_location"
            
            # Location options
            location_options = ["Silom", "Asoke", "Phuket", "Pattaya", "Samui", "Huahin", "Chiangmai"]
            
            # Send location options as quick reply
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in location_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà",
                    quick_reply=quick_reply
                )
            )
        else:
            # Send English level options as quick reply again
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in eng_level_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )
    
    # Location input
    elif session["state"] == "profile_location":
        # Location options
        location_options = ["Silom", "Asoke", "Phuket", "Pattaya", "Samui", "Huahin", "Chiangmai"]
        
        if text in location_options:
            session["location"] = text
            session["state"] = "profile_confirm"
            
            # Create profile summary
            profile_summary = create_profile_summary(session)
            
            # Send confirmation with quick reply
            items = [
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")),
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text=f"‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager :\n{profile_summary}\n\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
                    quick_reply=quick_reply
                )
            )
        else:
            # Send location options as quick reply again
            items = [
                QuickReplyButton(action=MessageAction(label=option, text=option))
                for option in location_options
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )
            
    # ================= MEETING FLOW =================
    # Profile confirmation
    elif session["state"] == "profile_confirm":
        if text == "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô":
            if "selected_pair" in session:
                del session["selected_pair"]
            if "emails" in session:
                del session["emails"]
            if "start_time" in session:
                del session["start_time"]
            if "end_time" in session:
                del session["end_time"]
                       
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà..."))
           
            scheduler.add_job(
                func=background_post_and_push,
                args=[user_id, session.copy()],
                trigger="date",
                run_date=datetime.now() + timedelta(seconds=2)
            )
                    
        elif text == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
            # Reset session and go back to initial state
            session.clear()
            session["state"] = "initial"
            send_initial_options(event.reply_token)
        else:
            # Send confirmation options again
            items = [
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", text="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô")),
                QuickReplyButton(action=MessageAction(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"))
            ]
            
            quick_reply = QuickReply(items=items)
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(
                    text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
                    quick_reply=quick_reply
                )
            )
    
    # ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á select_date
    elif session["state"] == "select_date":
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏ä‡πà‡∏ô "8/5/2568")
        selected_date_iso = None
        available_dates = []  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ (‡∏ß‡∏ß/‡∏î‡∏î/25XX)
        for time_slot_data in session.get("available_time_slots", []):
            date_str = time_slot_data.get("date", "")
            if date_str:
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å "2025-05-08" ‡πÄ‡∏õ‡πá‡∏ô "8/5/2568"
                try:
                    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                    thai_year = date_obj.year + 543  # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
                    thai_date = f"{date_obj.day}/{date_obj.month}/{thai_year}"
                    available_dates.append(thai_date)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if text == thai_date:
                        selected_date_iso = date_str
                        selected_date_thai = thai_date
                        break
                except ValueError:
                    pass
        
        if selected_date_iso:
            # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏µ‡∏ö‡∏±‡∏Å
            print(f"‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {selected_date_thai}")
            
            session["state"] = "select_time_slot"  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            session["selected_date_iso"] = selected_date_iso
            session["selected_date"] = selected_date_thai
            
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {selected_date_thai} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á...")
            )
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
            def get_available_timeslots_later():
                try:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
                    date_request = {
                        "date": selected_date_iso,
                        "location": session.get("location", ""),
                        "english_min": 5 if session.get("eng_level") == "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5" else 4,
                        "exp_kind": "strong" if session.get("exp") == "Strong exp" else "non",
                        "age_key": str(session.get("age", ""))
                    }
                    
                    print(f"üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á: {date_request}")
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                    response = requests.post(
                        f"{base_url}/events/available-timeslots",
                        json=date_request,
                        timeout=30
                    )
                    
                    print(f"üì° API Response (status): {response.status_code}")
                    
                    if response.status_code == 200:
                        api_response = response.json()
                        print(f"üì¶ API Response (available_timeslots): {api_response}")
                        
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô session - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
                        if "available_timeslots" in api_response:
                            time_slots = []
                            for slot in api_response["available_timeslots"]:
                                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                                pairs = []
                                pair_details = []
                                
                                # ‡∏™‡∏£‡πâ‡∏≤‡∏á pair ‡πÅ‡∏•‡∏∞ pair_details ‡∏à‡∏≤‡∏Å available_pairs
                                for pair_info in slot.get("available_pairs", []):
                                    pair_name = pair_info.get("pair", "")
                                    pairs.append(pair_name)
                                    pair_details.append(pair_info)
                                
                                time_slots.append({
                                    "time": slot.get("time_slot", ""),
                                    "available_pairs": pairs,
                                    "pair_details": pair_details
                                })
                                
                            session["time_slots"] = time_slots
                        
                        # ‡∏™‡πà‡∏á line_payload ‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                        line_payload = api_response.get("line_payload", [])
                        if line_payload:
                            send_line_payload(user_id, line_payload)
                        else:
                            # ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                            line_bot_api.push_message(
                                user_id,
                                TextSendMessage(text="‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô")
                            )
                            # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                            session["state"] = "select_date"
                            if "selected_date" in session:
                                del session["selected_date"]
                            if "selected_date_iso" in session:
                                del session["selected_date_iso"]
                    else:
                        line_bot_api.push_message(
                            user_id,
                            TextSendMessage(text=f"‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ({response.status_code}) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                        )
                except Exception as e:
                    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {e}")
                    line_bot_api.push_message(
                        user_id,
                        TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö: {str(e)} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                    )
            # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            scheduler.add_job(
                func=get_available_timeslots_later,
                trigger="date",
                run_date=datetime.now() + timedelta(seconds=1)
            )
        else:
            # ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ available_dates ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if available_dates:
                items = [
                    QuickReplyButton(action=MessageAction(label=date, text=date))
                    for date in available_dates[:13]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 13 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Line
                ]
                
                quick_reply = QuickReply(items=items)
                
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(
                        text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ",
                        quick_reply=quick_reply
                    )
                )
            # else:
            #     # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà session ‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà
            #     line_bot_api.reply_message(
            #         event.reply_token,
            #         TextSendMessage(text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
            #     )
            #     # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
                
            #     # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            #     scheduler.add_job(
            #         func=get_available_dates_again,
            #         trigger="date",
            #         run_date=datetime.now() + timedelta(seconds=1)
            #     )
    # Time slot selection
    elif session["state"] == "select_time_slot":
        if text == "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö":  # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            session["state"] = "select_date"
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
            if "selected_date" in session:
                del session["selected_date"]
            if "selected_date_iso" in session:
                del session["selected_date_iso"]
            
            # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ available_time_slots
            if "available_time_slots" in session and session["available_time_slots"]:
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                display_date_selection(event.reply_token, session["available_time_slots"])
            else:
                # ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• available_time_slots ‡∏à‡∏∂‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...")
                )
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
                def get_available_dates_again():
                    try:
                        profile_json = {
                            "location": session.get("location"),
                            "english_min": 5 if session.get("eng_level") == "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5" else 4,
                            "exp_kind": "strong" if session.get("exp") == "Strong exp" else "non",
                            "age_key": str(session.get("age")),
                            "start_date": datetime.now().strftime("%Y-%m-%d"),
                            "include_holidays": True
                        }

                        response = requests.post(
                            f"{base_url}/events/available-dates",
                            json=profile_json,
                            timeout=30
                        )
                        
                        if response.status_code == 200:
                            api_response = response.json()
                            
                            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ
                            if "available_dates" in api_response:
                                # ‡∏™‡∏£‡πâ‡∏≤‡∏á available_time_slots ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                                available_time_slots = []
                                for date_str in api_response["available_dates"]:
                                    available_time_slots.append({"date": date_str})
                                session["available_time_slots"] = available_time_slots
                            
                            # ‡∏™‡πà‡∏á line_payload ‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                            line_payload = api_response.get("line_payload", [])
                            if line_payload:
                                send_line_payload(user_id, line_payload)
                        else:
                            line_bot_api.push_message(
                                user_id,
                                TextSendMessage(text="‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                            )
                    except Exception as e:
                        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {e}")
                        line_bot_api.push_message(
                            user_id,
                            TextSendMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                        )
                        
                # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                scheduler.add_job(
                    func=get_available_dates_again,
                    trigger="date",
                    run_date=datetime.now() + timedelta(seconds=1)
                )
                
                return
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÇ‡∏î‡∏¢‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (1), (2) ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏•‡πâ‡∏ß‡∏ô‡πÜ
        slot_choice = text.strip()
        if slot_choice.startswith("(") and slot_choice.endswith(")"):
            slot_choice = slot_choice[1:-1]  # ‡∏ï‡∏±‡∏î ( ) ‡∏≠‡∏≠‡∏Å
        
        try:
            slot_number = int(slot_choice)
            if 1 <= slot_number <= len(session.get("time_slots", [])):
                selected_time_slot = session["time_slots"][slot_number - 1]
                session["selected_time_slot"] = selected_time_slot
                session["selected_time"] = selected_time_slot.get("time", "")  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
                
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text=f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ {session['selected_time']} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á...")
                )
                
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
                def get_available_pairs_later():
                    try:
                        # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
                        pair_request = {
                            "date": session["selected_date_iso"],
                            "time_slot": session["selected_time"],
                            "location": session.get("location", ""),
                            "english_min": 5 if session.get("eng_level") == "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5" else 4,
                            "exp_kind": "strong" if session.get("exp") == "Strong exp" else "non",
                            "age_key": str(session.get("age", ""))
                        }
                        
                        print(f"üöÄ Sending request to get available pairs: {pair_request}")
                        
                        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                        response = requests.post(
                            f"{base_url}/events/available-pairs",
                            json=pair_request,
                            timeout=30
                        )
                        
                        print(f"üì° API Response (status): {response.status_code}")
                        
                        if response.status_code == 200:
                            api_response = response.json()
                            print(f"üì¶ API Response (available_pairs): {api_response}")
                            
                            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô select_pair
                            session["state"] = "select_pair"
                            
                            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô session
                            if "available_pairs" in api_response:
                                # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï pair_details ‡πÉ‡∏ô selected_time_slot
                                session["selected_time_slot"]["pair_details"] = api_response["available_pairs"]
                            
                            # ‡∏™‡πà‡∏á line_payload ‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                            line_payload = api_response.get("line_payload", [])
                            if line_payload:
                                send_line_payload(user_id, line_payload)
                            else:
                                # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ line_payload ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                                send_pair_selection(user_id, session["selected_time_slot"])
                        else:
                            line_bot_api.push_message(
                                user_id,
                                TextSendMessage(text=f"‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á ({response.status_code}) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                            )
                    except Exception as e:
                        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà: {e}")
                        line_bot_api.push_message(
                            user_id,
                            TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö: {str(e)} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                        )
                
                # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                scheduler.add_job(
                    func=get_available_pairs_later,
                    trigger="date",
                    run_date=datetime.now() + timedelta(seconds=1)
                )
            else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text=f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 1-{len(session.get('time_slots', []))})")
                )
        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            )
            
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà
    elif session["state"] == "select_pair":
        if text == "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö":  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
            session["state"] = "select_time_slot"
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
            if "selected_pair" in session:
                del session["selected_pair"]
                
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            def get_available_timeslots_again():
                try:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
                    date_request = {
                        "date": session["selected_date_iso"],
                        "location": session.get("location", ""),
                        "english_min": 5 if session.get("eng_level") == "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5" else 4,
                        "exp_kind": "strong" if session.get("exp") == "Strong exp" else "non",
                        "age_key": str(session.get("age", ""))
                    }
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
                    response = requests.post(
                        f"{base_url}/events/available-timeslots",
                        json=date_request,
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        api_response = response.json()
                        
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏•‡∏á‡πÉ‡∏ô session - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
                        if "available_timeslots" in api_response:
                            time_slots = []
                            for slot in api_response["available_timeslots"]:
                                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                                pairs = []
                                pair_details = []
                                
                                # ‡∏™‡∏£‡πâ‡∏≤‡∏á pair ‡πÅ‡∏•‡∏∞ pair_details ‡∏à‡∏≤‡∏Å available_pairs
                                for pair_info in slot.get("available_pairs", []):
                                    pair_name = pair_info.get("pair", "")
                                    pairs.append(pair_name)
                                    pair_details.append(pair_info)
                                
                                time_slots.append({
                                    "time": slot.get("time_slot", ""),
                                    "available_pairs": pairs,
                                    "pair_details": pair_details
                                })
                                
                            session["time_slots"] = time_slots
                        
                        # ‡∏™‡πà‡∏á line_payload ‡∏à‡∏≤‡∏Å API ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                        line_payload = api_response.get("line_payload", [])
                        if line_payload:
                            send_line_payload(user_id, line_payload)
                        else:
                            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ line_payload ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
                            send_time_slots(user_id, session["time_slots"], session["selected_date"])
                    else:
                        line_bot_api.push_message(
                            user_id,
                            TextSendMessage(text="‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                        )
                except Exception as e:
                    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤: {e}")
                    line_bot_api.push_message(
                        user_id,
                        TextSendMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                    )
                    
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=f"‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤...")
            )
            
            # ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
            scheduler.add_job(
                func=get_available_timeslots_again,
                trigger="date",
                run_date=datetime.now() + timedelta(seconds=1)
            )
            
            return
                
        try:
            pair_number = int(text.strip("()"))
            if 1 <= pair_number <= len(session["selected_time_slot"]["pair_details"]):
                selected_pair = session["selected_time_slot"]["pair_details"][pair_number - 1]
                session["selected_pair"] = selected_pair
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå
                session["emails"] = [
                    selected_pair["manager"]["email"],
                    selected_pair["recruiter"]["email"]
                ]
                print(f"‚úÖ Collected emails: {session['emails']}")
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dd/mm/yyyy (Thai) ‡πÄ‡∏õ‡πá‡∏ô yyyy-mm-dd (ISO)
                date_parts = session["selected_date"].split("/")
                if len(date_parts) == 3:
                    day, month, thai_year = date_parts
                    year = int(thai_year) - 543  # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
                    iso_date = f"{year}-{month.zfill(2)}-{day.zfill(2)}"
                else:
                    # ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà session["selected_date_iso"] ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                    iso_date = session.get("selected_date_iso", "")
                
                # ‡πÅ‡∏¢‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
                time_range = session["selected_time_slot"]["time"]
                start_time, end_time = time_range.split("-")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO datetime ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô session
                session["start_time"] = f"{iso_date}T{start_time}:00+07:00"
                session["end_time"] = f"{iso_date}T{end_time}:00+07:00"
                print(f"‚úÖ Start time: {session['start_time']}, End time: {session['end_time']}")
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
                session["booking_payload"] = {
                    "users": [
                        {"email": selected_pair["manager"]["email"]},
                        {"email": selected_pair["recruiter"]["email"]}
                    ],
                    "start_date": iso_date,
                    "end_date": iso_date,
                    "start_time": start_time.strip(),
                    "end_time": end_time.strip()
                }

                print("üì¶ Booking Payload JSON:", json.dumps(session["booking_payload"], indent=2))
                
                session["state"] = "confirm"
                
                # ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                summary = create_meeting_summary(
                    session["selected_date"],
                    session["selected_time_slot"]["time"],
                    [selected_pair["manager"]["name"], selected_pair["recruiter"]["name"]]
                )
                
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
                send_meeting_confirmation(event.reply_token, summary)
                
            else:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà Manager-Recruiter ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ")
                )
        except ValueError:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà Manager-Recruiter ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            )
        
    # Meeting confirmation
    elif session["state"] == "confirm":
        if text == "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö":  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà Manager-Recruiter
            session["state"] = "select_pair"
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ
            if "selected_pair" in session:
                del session["selected_pair"]
            if "emails" in session:
                del session["emails"]
            if "start_time" in session:
                del session["start_time"]
            if "end_time" in session:
                del session["end_time"]
            # ‡∏™‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà‡πÉ‡∏´‡∏°‡πà
            send_pair_selection(event.reply_token, session["selected_time_slot"])
            return
            
        if text == "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î":
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ meeting_name
            session["meeting_name"] = "‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
            session["meeting_description"] = "‡∏ô‡∏±‡∏î‡∏™‡∏±‡∏°‡∏†‡∏≤‡∏©‡∏ì‡πå‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏° ‡∏Ñ‡∏£‡∏±‡∏ö‡∏û‡∏µ‡πà ‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            selected_pair = session["selected_pair"]
            participants = [selected_pair["manager"]["name"], selected_pair["recruiter"]["name"]]
            
            meeting_info = {
                "name": session["meeting_name"],
                "description": session["meeting_description"],
                "date": session["selected_date"],
                "time": session["selected_time_slot"]["time"],
                "duration": "30 ‡∏ô‡∏≤‡∏ó‡∏µ",
                "participants": participants,
                "created_at": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "created_by": user_id
            }
            meeting_result = BulkEventRequest(
                    user_emails=session["emails"],
                    summary=session["meeting_name"],
                    description=session["meeting_description"],
                    location= f"{session.get('location')}",
                    start_time=session["start_time"],
                    end_time=session["end_time"],
                    attendees=[]
            )
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            meeting_confirmation = create_meeting_confirmation(meeting_info)
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text=meeting_confirmation)
            )

            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÑ‡∏õ api
            scheduler.add_job(
                    func=send_book_meeting,
                    args=[meeting_result],
                    trigger="date",
                    run_date=datetime.now() + timedelta(seconds=10)
                )
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
            profile_data = {k: session[k] for k in ["age", "exp", "eng_level", "location", "available_time_slots"] if k in session}
            session.clear()
            session.update(profile_data)
            session["state"] = "initial"
            session["profile_completed"] = True
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
            send_menu_only(user_id)
            # scheduler.add_job(
            #     func=send_menu_only,
            #     args=[user_id],
            #     trigger="date",
            #     run_date=datetime.now() + timedelta(seconds=12)
            # )
            
        elif text == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î":
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            )
            # Reset state but keep profile information
            profile_data = {k: session[k] for k in ["age", "exp", "eng_level", "location"] if k in session}
            session.clear()
            session.update(profile_data)
            session["state"] = "initial"
            session["profile_completed"] = True
            
            # Show initial options again
            send_menu_only(user_id)
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î, ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠ ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö)")
            )
       
def send_initial_options(reply_token_or_user_id):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ + Quick Reply"""
    message = TextSendMessage(
        text="üìå ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ LINE Chat ‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:",
        quick_reply=QuickReply(items=[
            QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager", text="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager")),
            QuickReplyButton(action=MessageAction(label="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ", text="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ")),
            QuickReplyButton(action=MessageAction(label="login(M&R)", text="login(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Manager & Recruiter)"))
        ])
    )

    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        line_bot_api.push_message(reply_token_or_user_id, message)
    else:
        line_bot_api.reply_message(reply_token_or_user_id, message)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏ô‡∏π (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
def send_menu_only(reply_token_or_user_id):
    """‡∏™‡πà‡∏á Quick Reply ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ"""
    message = TextSendMessage(
        text=":>",  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ text ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
        quick_reply=QuickReply(items=[
            QuickReplyButton(action=MessageAction(label="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager", text="‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager")),
            QuickReplyButton(action=MessageAction(label="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ", text="‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ")),
            QuickReplyButton(action=MessageAction(label="login(M&R)", text="login(‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Manager & Recruiter)"))
        ])
    )

    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        line_bot_api.push_message(reply_token_or_user_id, message)
    else:
        line_bot_api.reply_message(reply_token_or_user_id, message)

def send_line_payload(user_id_or_reply_token, line_payload):
    """
    ‡∏™‡πà‡∏á LINE Payload ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE API ‡πÇ‡∏î‡∏¢‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å dictionary ‡πÄ‡∏õ‡πá‡∏ô LINE SDK objects
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á user_id ‡πÅ‡∏•‡∏∞ reply_token
    """
    is_reply_token = not (isinstance(user_id_or_reply_token, str) and user_id_or_reply_token.startswith("U"))
    
    for message_dict in line_payload:
        # ‡πÅ‡∏õ‡∏•‡∏á dictionary ‡πÄ‡∏õ‡πá‡∏ô LINE SDK object
        if message_dict["type"] == "text":
            # TextSendMessage
            if "quickReply" in message_dict:
                # ‡∏°‡∏µ Quick Reply
                items = []
                for item in message_dict["quickReply"]["items"]:
                    if item["type"] == "action" and item["action"]["type"] == "message":
                        items.append(
                            QuickReplyButton(
                                action=MessageAction(
                                    label=item["action"]["label"],
                                    text=item["action"]["text"]
                                )
                            )
                        )
                
                quick_reply = QuickReply(items=items)
                message = TextSendMessage(
                    text=message_dict["text"],
                    quick_reply=quick_reply
                )
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ Quick Reply
                message = TextSendMessage(text=message_dict["text"])
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            if is_reply_token:
                line_bot_api.reply_message(user_id_or_reply_token, message)
            else:
                line_bot_api.push_message(user_id_or_reply_token, message)
                
        # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô image, template, flex ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
def send_time_slots(reply_token_or_user_id, time_slots, selected_date):
    """Send available time slots"""
    # Create message with available time slots
    slot_texts = []

    for i, slot in enumerate(time_slots[:12], start=1):  # ‡∏ï‡∏±‡∏î‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 12 ‡∏≠‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏•‡∏¢
        pairs_text = "\n   " + "\n   ".join([f"üë•{pair}" for pair in slot["available_pairs"]])
        slot_text = f"{i}. ‡πÄ‡∏ß‡∏•‡∏≤ {slot['time']}{pairs_text}"
        slot_texts.append(slot_text)

    message_text = f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : {selected_date}\n" + "\n".join(slot_texts)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 12 slots
    items = [
        QuickReplyButton(action=MessageAction(label=f"({i})", text=f"({i})"))
        for i in range(1, len(slot_texts) + 1)
    ]

    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏° '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å' ‡πÄ‡∏õ‡πá‡∏ô '‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö'
    items.append(QuickReplyButton(action=MessageAction(label="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", text="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö")))

    quick_reply = QuickReply(items=items)

    message = TextSendMessage(text=message_text, quick_reply=quick_reply)

    # Handle both reply_token and user_id
    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        line_bot_api.push_message(reply_token_or_user_id, message)
    else:
        line_bot_api.reply_message(reply_token_or_user_id, message)

def send_pair_selection(reply_token, time_slot):
    """Send Manager-Recruiter pairs for selection"""
    # Create message with available pairs
    pairs = time_slot["pair_details"]
    
    message_text = f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Manager-Recruiter ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏±‡∏î\n‡πÄ‡∏ß‡∏•‡∏≤ {time_slot['time']}\n"
    
    for i, pair_detail in enumerate(pairs, start=1):
        message_text += f"   {i}.üë• {pair_detail['pair']}\n"
    
    # ‡πÅ‡∏™‡∏î‡∏á quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà Manager-Recruiter (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö)
    items = [
        QuickReplyButton(action=MessageAction(label=f"({i})", text=f"({i})"))
        for i in range(1, min(len(pairs) + 1, 13))
    ]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    items.append(QuickReplyButton(action=MessageAction(label="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", text="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö")))
    
    quick_reply = QuickReply(items=items)
    
    line_bot_api.reply_message(
        reply_token,
        TextSendMessage(text=message_text, quick_reply=quick_reply)
    )
    
def send_meeting_confirmation(reply_token, meeting_summary):
    """Send meeting confirmation"""
    items = [
        QuickReplyButton(action=MessageAction(label="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ô‡∏±‡∏î", text="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î")),
        QuickReplyButton(action=MessageAction(label="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î", text="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ô‡∏±‡∏î")),
        QuickReplyButton(action=MessageAction(label="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", text="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö"))  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    ]
    
    quick_reply = QuickReply(items=items)
    
    line_bot_api.reply_message(
        reply_token,
        TextSendMessage(
            text=f"‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:\n{meeting_summary}\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
            quick_reply=quick_reply
        )
    )

def create_profile_summary(session):
    """Create a summary of the user's profile"""
    summary = f"‡∏≠‡∏≤‡∏¢‡∏∏: {session.get('age')}\n"
    summary += f"‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå: {session.get('exp')}\n"
    summary += f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©: {session.get('eng_level')}\n"
    summary += f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: {session.get('location')}"
    return summary

def create_meeting_summary(date, time, participants):
    """Create a summary of the meeting"""
    summary = f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : {date}\n"
    summary += f"‡πÄ‡∏ß‡∏•‡∏≤ : {time}\n"
    summary += f"‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° :\n"
    
    for participant in participants:
        summary += f"- {participant}\n"
    
    return summary

def create_meeting_confirmation(meeting_info):
    """Create a confirmation message for the meeting"""
    now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    
    confirmation = "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\n"
    confirmation += f"üìç ‡∏ä‡∏∑‡πà‡∏≠ : {meeting_info.get('name', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠')}\n" 
    confirmation += f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : {meeting_info.get('date', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
    confirmation += f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤ : {meeting_info.get('time', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}\n"
    confirmation += f"‚è±Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ : {meeting_info.get('duration', '30 ‡∏ô‡∏≤‡∏ó‡∏µ')}\n"
    confirmation += f"üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î : {meeting_info.get('description', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î')}\n"
    confirmation += "üë• ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° :\n"
    
    for participant in meeting_info.get('participants', []):
        confirmation += f"    - {participant}\n"
    
    confirmation += f"üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ : {meeting_info.get('created_at', now)}\n"
    confirmation += "‡∏à‡∏≠‡∏á‡∏ö‡∏ô google calendar ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    
    return confirmation

###### use api #######
def send_book_meeting(meeting_result):
            try:
                print("üöÄ POST ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", meeting_result.dict())
                print(base_url)
                response = requests.post(
                    f"{base_url}/events/create-bulk",
                    json=meeting_result.dict(),
                    headers={"Content-Type": "application/json"},
                    timeout=30 # ‡∏ñ‡πâ‡∏≤ timeout ‡∏ô‡πâ‡∏≠‡∏¢‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô timeout ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏õ‡∏ö‡∏∏‡πä‡∏Ñ‡πÉ‡∏ô calendar 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
                )
                print("‚úÖ POST ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", response.status_code)
            except Exception as e:
                print("‚ùå POST ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", str(e))
def display_date_selection(reply_token_or_user_id, available_time_slots):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• available_time_slots
    ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà
    """
    available_dates = []
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ (‡∏ß‡∏ß/‡∏î‡∏î/25XX)
    for time_slot_data in available_time_slots:
        date_str = time_slot_data.get("date", "")
        if date_str:
            try:
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                thai_year = date_obj.year + 543  # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
                thai_date = f"{date_obj.day}/{date_obj.month}/{thai_year}"
                available_dates.append(thai_date)
            except ValueError:
                pass
    
    if not available_dates:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        message = TextSendMessage(
            text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö"
        )
    else:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Quick Reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        items = [
            QuickReplyButton(action=MessageAction(label=date, text=date))
            for date in available_dates[:13]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 13 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á Line
        ]
        
        quick_reply = QuickReply(items=items)
        
        message = TextSendMessage(
            text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°",
            quick_reply=quick_reply
        )
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á reply_token ‡πÅ‡∏•‡∏∞ user_id)
    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        # It's a user_id
        line_bot_api.push_message(reply_token_or_user_id, message)
    else:
        # It's a reply_token
        line_bot_api.reply_message(reply_token_or_user_id, message)
        
def display_time_slot_selection(reply_token_or_user_id, time_slots, selected_date):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• time_slots
    ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà
    """
    slot_texts = []

    for i, slot in enumerate(time_slots[:12], start=1):  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 12 ‡∏≠‡∏±‡∏ô
        pairs_text = "\n   " + "\n   ".join([f"üë•{pair}" for pair in slot.get("available_pairs", [])])
        slot_text = f"{i}. ‡πÄ‡∏ß‡∏•‡∏≤ {slot.get('time', '')}{pairs_text}"
        slot_texts.append(slot_text)

    if not slot_texts:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        message = TextSendMessage(
            text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô"
        )
    else:
        message_text = f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : {selected_date}\n" + "\n".join(slot_texts)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        items = [
            QuickReplyButton(action=MessageAction(label=f"({i})", text=f"({i})"))
            for i in range(1, len(slot_texts) + 1)
        ]

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
        items.append(QuickReplyButton(action=MessageAction(label="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", text="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö")))

        quick_reply = QuickReply(items=items)

        message = TextSendMessage(text=message_text, quick_reply=quick_reply)

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á reply_token ‡πÅ‡∏•‡∏∞ user_id)
    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        # It's a user_id
        line_bot_api.push_message(reply_token_or_user_id, message)
    else:
        # It's a reply_token
        line_bot_api.reply_message(reply_token_or_user_id, message)

def display_pair_selection(reply_token_or_user_id, time_slot):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡πà Manager-Recruiter ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• time_slot
    ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡∏°‡πà
    """
    if not time_slot or "pair_details" not in time_slot:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        message = TextSendMessage(
            text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡πà Manager-Recruiter ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà"
        )
    else:
        pairs = time_slot["pair_details"]
        
        if not pairs:
            message = TextSendMessage(
                text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡πà Manager-Recruiter ‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏∑‡πà‡∏ô"
            )
        else:
            message_text = f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Manager-Recruiter ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏±‡∏î\n‡πÄ‡∏ß‡∏•‡∏≤ {time_slot.get('time', '')}\n"
            
            for i, pair_detail in enumerate(pairs, start=1):
                message_text += f"   {i}.üë• {pair_detail.get('pair', '')}\n"
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏π‡πà (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ + ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö)
            items = [
                QuickReplyButton(action=MessageAction(label=f"({i})", text=f"({i})"))
                for i in range(1, min(len(pairs) + 1, 13))
            ]
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            items.append(QuickReplyButton(action=MessageAction(label="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", text="‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö")))
            
            quick_reply = QuickReply(items=items)
            
            message = TextSendMessage(text=message_text, quick_reply=quick_reply)
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á reply_token ‡πÅ‡∏•‡∏∞ user_id)
    if isinstance(reply_token_or_user_id, str) and reply_token_or_user_id.startswith("U"):
        # It's a user_id
        line_bot_api.push_message(reply_token_or_user_id, message)
    else:
        # It's a reply_token
        line_bot_api.reply_message(reply_token_or_user_id, message)

#API FUNCTION
def background_post_and_push(user_id, session_data):
                try:
                    profile_json = {
                        "location": session_data.get("location"),
                        "english_min": 5 if session_data.get("eng_level") == "‡∏£‡∏∞‡∏î‡∏±‡∏ö 5" else 4,
                        "exp_kind": "strong" if session_data.get("exp") == "Strong exp" else "non",
                        "age_key": str(session_data.get("age")),
                        "start_date": datetime.now().strftime("%Y-%m-%d"),
                        "include_holidays": True
                    }
                    # print("üöÄ Background Started with data:", profile_json)

                    response = requests.post(
                        f"{base_url}/events/available-dates",
                        json=profile_json,
                        timeout=30
                    )
                    response.raise_for_status()
                    api_response = response.json()
                    print(api_response)
                    
                    if response.status_code == 200:
                        user_sessions[user_id]["state"] = "select_date"
                        
                        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ
                        if "available_dates" in api_response:
                            # ‡∏™‡∏£‡πâ‡∏≤‡∏á available_time_slots ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
                            available_time_slots = []
                            for date_str in api_response["available_dates"]:
                                available_time_slots.append({"date": date_str})
                            user_sessions[user_id]["available_time_slots"] = available_time_slots
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        line_bot_api.push_message(
                            user_id,
                            TextSendMessage(text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°")
                        )
                        
                        # ‡∏™‡πà‡∏á line_payload ‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE API
                        line_payload = api_response.get("line_payload", [])
                        print(line_payload)
                        if line_payload:
                            send_line_payload(user_id, line_payload)
                        
                    else:
                        line_bot_api.push_message(
                            user_id,
                            TextSendMessage(text="‚ùó ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                        )
                    
                    print("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manager ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÅ‡∏•‡πâ‡∏ß:", response.status_code)
                except Exception as e:
                    print("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e)
                    line_bot_api.push_message(
                        user_id,
                        TextSendMessage(text="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
                    )


if __name__ == "__main__":
    uvicorn.run(app, host="localhost", port=8001)