# 1. Standard Library Imports
import os
import smtplib
import sys
import threading
import time as timeTest
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta, timezone
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from datetime import datetime, timezone, time, timedelta
from datetime import datetime, timezone, time, timedelta

# 2. Third-Party Library Imports
import pandas as pd
from google.auth.transport.requests import Request as GoogleRequest
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import get_as_dataframe

# 3. Local Application Imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from config import CLIENT_ID, CLIENT_SECRET, SCOPES
from src.api.endpoints import *
from src.config import *
from utils.token_db import *

base_url = os.environ.get('BASE_URL')

spreadsheet_id = os.environ.get('SPREADSHEET_ID')
credentialsGsheet = os.environ.get('CREDENTIALS_GOOGLE_SHEET')
scopeGsheet = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentialsGsheet = ServiceAccountCredentials.from_json_keyfile_name(credentialsGsheet, scopeGsheet)
client = gspread.authorize(credentialsGsheet)



#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def is_token_valid(user_email: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å DB)"""
    t1 = timeTest.time()
    token_entry = get_token(user_email)
    if not token_entry:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email} (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {timeTest.time() - t1} s)")
        return False

    creds = Credentials(
        token=token_entry.access_token,
        refresh_token=token_entry.refresh_token,
        token_uri="https://oauth2.googleapis.com/token",
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        scopes=SCOPES
    )

    if creds.valid:
        print(f"‚úÖ Token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}(‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {timeTest.time() - t1} s)")
        return True

    if creds.expired and creds.refresh_token:
        try:
            creds.refresh(GoogleRequest())
            update_token(
                email=user_email,
                access_token=creds.token,
                refresh_token=creds.refresh_token,
                expiry=creds.expiry
            )
            print(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}")
            return False

    print(f"‚ùå Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ refresh_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
    return False

#‡πÄ‡∏ä‡πá‡∏Ñ token ‡∏à‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•
def get_credentials(user_email: str):
    """‡∏£‡∏±‡∏ö credentials ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Calendar API"""
    creds = None
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token ‡∏à‡∏≤‡∏Å DB
    token_entry = get_token(user_email)
    
    if token_entry:
        try:
            creds = Credentials(
                token=token_entry.access_token,
                refresh_token=token_entry.refresh_token,
                token_uri="https://oauth2.googleapis.com/token",
                client_id=CLIENT_ID,
                client_secret=CLIENT_SECRET,
                scopes=SCOPES
            )
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î token: {str(e)}")

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà valid ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ refresh ‡∏´‡∏£‡∏∑‡∏≠ auth ‡πÉ‡∏´‡∏°‡πà

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà valid ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ refresh ‡∏´‡∏£‡∏∑‡∏≠ auth ‡πÉ‡∏´‡∏°‡πà

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà valid ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ refresh ‡∏´‡∏£‡∏∑‡∏≠ auth ‡πÉ‡∏´‡∏°‡πà
    if not creds or not creds.valid:
        if creds:
            print(f"üòê Token expired: {creds.expired}, Has refresh_token: {bool(creds.refresh_token)}")
        if creds and creds.expired and creds.refresh_token:
            try:
                with email_locks[user_email]:
                    print(f"üîÑ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
                    creds.refresh(GoogleRequest())
                if creds.refresh_token:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á DB
                    update_token(
                        email=user_email,
                        access_token=creds.token,
                        refresh_token=creds.refresh_token,
                        expiry=creds.expiry
                    )
                    print(f"‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
                else:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ refresh_token ‡∏´‡∏•‡∏±‡∏á refresh ‚Äî ‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
            except Exception as e:
                if 'invalid_grant' in str(e):
                    print("üí• invalid_grant ‚Äî ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏•‡∏≤‡∏î ‡∏´‡∏£‡∏∑‡∏≠ token ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                return _get_auth_redirect(user_email)
        else:
            print("‚ùå Token ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ refresh_token ‡πÄ‡∏•‡∏¢")
            return _get_auth_redirect(user_email)
            
    return creds

#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
def _get_auth_redirect(user_email: str):
    flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
    flow.redirect_uri = f"{base_url}/oauth2callback"
    auth_url, _ = flow.authorization_url(
        access_type='offline',
        prompt='consent',
        include_granted_scopes='true',
        state=user_email
    )
    return {
        "requires_auth": True,
        "auth_url": auth_url,
        "redirect_uri": flow.redirect_uri
    }

def add_location_column(df):
    """
    ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Location ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á (df)
    ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á Email ‡πÄ‡∏õ‡πá‡∏ô NaN
    """
    curr_loc = None          # ‡πÄ‡∏Å‡πá‡∏ö location ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    loc_list = []            # ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà

    for _, row in df.iterrows():
        if pd.isna(row['Email']):        # ‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
            curr_loc = row['Name']       # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï location
        loc_list.append(curr_loc)        # ‡πÄ‡∏ï‡∏¥‡∏° loc ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ô‡∏±‡πâ‡∏ô

    df['Location'] = loc_list
    return df


#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet
def get_people(location=None):
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠‚Äë‡∏≠‡∏µ‡πÄ‡∏°‡∏•‚Äë‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ï M ‡πÅ‡∏•‡∏∞ R
    """
 
    # ---------- 1) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets API ----------
    # ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï‡∏à‡∏≤‡∏Å ID
    sheet = client.open_by_key(spreadsheet_id)
    
    # ---------- 2) ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï ----------
    worksheet_R = sheet.worksheet('R')
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô DataFrame
    df_R = get_as_dataframe(worksheet_R, evaluate_formulas=True, skiprows=0)
    
    # ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô NaN ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
    df_R = df_R.dropna(how='all').reset_index(drop=True)

    # ---------- 3) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Name ----------
    df_R.rename(columns={df_R.columns[0]: 'Name'}, inplace=True)

    # ---------- 4) ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Location ----------
    df_R = add_location_column(df_R)

    # ---------- 5) ‡∏ï‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô (Email ‡πÄ‡∏õ‡πá‡∏ô NaN) ----------
    df_R = df_R[df_R['Email'].notna()].reset_index(drop=True)

    # ---------- 6) ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Location ----------
    if location:
        df_R = df_R[df_R['Location'].str.contains(location, case=False, na=False)]


    # ---------- 10) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (dict ‚Üí list ‡∏Ç‡∏≠‡∏á dict) ----------
    list_R = (
        df_R[['Name', 'Email', 'Location']]
        .to_dict(orient='records')
    )
    
    return {'R': list_R}

def refresh_token_safe(user_email: str):
    token_entry = get_token(user_email)
    if not token_entry:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
        return None

    creds = Credentials(
        token=token_entry.access_token,
        refresh_token=token_entry.refresh_token,
        token_uri="https://oauth2.googleapis.com/token",
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        scopes=SCOPES
    )

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ expiry ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    need_refresh = False
    if not creds.expiry:
        need_refresh = True
        print(f"‚ö†Ô∏è Token ‡∏Ç‡∏≠‡∏á {user_email} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ expiry ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
    elif creds.expired:
        need_refresh = True
        print(f"‚ö†Ô∏è Token ‡∏Ç‡∏≠‡∏á {user_email} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
    elif (creds.expiry - datetime.utcnow()).total_seconds() < 300:
        need_refresh = True
        seconds_left = (creds.expiry - datetime.utcnow()).total_seconds()
        print(f"‚ö†Ô∏è Token ‡∏Ç‡∏≠‡∏á {user_email} ‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÉ‡∏ô {int(seconds_left)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
    
    if need_refresh:
        try:
            creds.refresh(GoogleRequest())
            update_token(
                email=user_email,
                access_token=creds.token,
                refresh_token=creds.refresh_token,
                expiry=creds.expiry
            )
            print(f"‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
        except Exception as e:
            print(f"‚ùå ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
            return None
    else:
        print(f"‚úÖ Token ‡∏Ç‡∏≠‡∏á {user_email} ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")

    return creds

#‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà - ‡πÄ‡∏ß‡∏•‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO
def convert_to_iso_format(date, time):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO
    
    Args:
        date (str): ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "YYYY-MM-DD"
        time (str): ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "HH:MM-HH:MM"
        
    Returns:
        tuple: (start_time, end_time) ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO format
    """
    try:
        # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        start_time, end_time = time.split('-')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á datetime objects
        start_datetime = f"{date}T{start_time}:00+07:00"
        end_datetime = f"{date}T{end_time}:00+07:00"
        
        return start_datetime, end_datetime
    except Exception as e:
        raise ValueError(f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}")


#========================================== fot API date, timeslot, pairs ======================================
import asyncio

#‡πÄ‡∏ä‡πá‡∏Ñ token ‡∏Ç‡∏≠‡∏á recruiter ‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á google calendar ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏° ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á recruiter ‡∏ß‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏´‡∏°
def check_recruiter_availability(user_info, date, time_min, time_max):
    """
    ‡πÄ‡∏ä‡πá‡∏Ñ token ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á recruiter ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    """
    email = user_info["Email"]
    name = user_info["Name"]
    calendar_id = email
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ token validity
    if not is_token_valid(email):
        print(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {email} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô")
        return None
    
    try:
        # ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å DB
        token_entry = get_token(email)
        creds = Credentials(
            token=token_entry.access_token,
            refresh_token=token_entry.refresh_token,
            token_uri="https://oauth2.googleapis.com/token",
            client_id=CLIENT_ID,
            client_secret=CLIENT_SECRET,
            scopes=SCOPES
        )
        service = build('calendar', 'v3', credentials=creds)
        
        events_result = service.events().list(
            calendarId=calendar_id,
            timeMin=time_min,
            timeMax=time_max,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        
        events = events_result.get('items', [])
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 9-18 ‡∏ô.)
        has_available_slots = False
        for hour in range(9, 18):
            for minute in [0, 30]:
                slot_start = datetime.combine(date, time(hour, minute)).astimezone(timezone.utc)
                slot_end = (slot_start + timedelta(minutes=30)).astimezone(timezone.utc)
                
                if is_available(events, slot_start, slot_end):
                    has_available_slots = True
                    break
            if has_available_slots:
                break
        
        # ‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ return ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• recruiter
        if has_available_slots:
            return {
                'email': email,
                'name': name
            }
        else:
            return None
            
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö R: {email}: {str(e)}")
        return None

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö concurrent token checking
def check_token_and_fetch_events(user_info, time_min, time_max):
    """
    ‡πÄ‡∏ä‡πá‡∏Ñ token ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á events ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    """
    email = user_info["Email"]
    name = user_info["Name"]
    calendar_id = email
    
    # ‡πÄ‡∏ä‡πá‡∏Ñ token validity
    if not is_token_valid(email):
        print(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {email} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô")
        return None
    
    try:
        token_entry = get_token(email)
        creds = Credentials(
            token=token_entry.access_token,
            refresh_token=token_entry.refresh_token,
            token_uri="https://oauth2.googleapis.com/token",
            client_id=CLIENT_ID,
            client_secret=CLIENT_SECRET,
            scopes=SCOPES
        )
        
        service = build('calendar', 'v3', credentials=creds)
        
        events_result = service.events().list(
            calendarId=calendar_id,
            timeMin=time_min,
            timeMax=time_max,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        
        events = events_result.get('items', [])
        
        return {
            'email': email,
            'name': name,
            'events': events
        }
        
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö R: {email}: {str(e)}")
        return None

#‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà 
def is_available(events, start_time, end_time):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    Args:
        events: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        start_time: ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        end_time: ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    Returns:
        bool: True ‡∏´‡∏≤‡∏Å‡∏ß‡πà‡∏≤‡∏á, False ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
    """
    for event in events:
        # ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
        if event.get('status') == 'cancelled':
            continue
        
        # ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        event_start_str = event.get('start', {}).get('dateTime')
        event_end_str = event.get('end', {}).get('dateTime')
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not event_start_str or not event_end_str:
            continue
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô datetime object
        event_start = datetime.fromisoformat(event_start_str.replace('Z', '+00:00'))
        event_end = datetime.fromisoformat(event_end_str.replace('Z', '+00:00'))
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        # ‡∏Å‡∏£‡∏ì‡∏µ 1: ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        # ‡∏Å‡∏£‡∏ì‡∏µ 2: ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        # ‡∏Å‡∏£‡∏ì‡∏µ 3: ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        # ‡∏Å‡∏£‡∏ì‡∏µ 4: ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        if (start_time < event_end and end_time > event_start):
            return False
    
    # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏ó‡∏±‡∏ö‡∏Å‡∏±‡∏ô ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    return True

#‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ (Ex 10/6/2568)
def create_thai_date_label(date_str):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
    Args:
        date_str: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "YYYY-MM-DD"
    Returns:
        str: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "DD/MM/YYYY ‡∏û.‡∏®."
    """
    try:
        date_obj = datetime.fromisoformat(date_str)
        thai_year = date_obj.year + 543  # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏Ñ.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
        return f"{date_obj.day}/{date_obj.month}/{thai_year}"
    except ValueError:
        return date_str

#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
def create_timeslot_range(date, start_hour=9, end_hour=18, interval_minutes=30):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    Args:
        date: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (datetime.date)
        start_hour: ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (default: 9)
        end_hour: ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°) (default: 18)
        interval_minutes: ‡∏ä‡πà‡∏ß‡∏á‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ (default: 30)
    Returns:
        list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tuple ‡∏Ç‡∏≠‡∏á (slot_start, slot_end)
    """
    slots = []
    for hour in range(start_hour, end_hour):
        for minute in range(0, 60, interval_minutes):
            slot_start = datetime.combine(date, time(hour, minute)).astimezone(timezone.utc)
            slot_end = (slot_start + timedelta(minutes=interval_minutes)).astimezone(timezone.utc)
            slots.append((slot_start, slot_end))
    return slots

#‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Facebook
def create_facebook_quick_replies(items_data, max_items=13, add_back_button=True):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Facebook Messenger
    Args:
        items_data: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° [(label, text), ...]
        max_items: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (default: 13, Facebook limit is 13)
        add_back_button: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: True)
    Returns:
        list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏õ‡∏∏‡πà‡∏° quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Facebook
    """
    quick_replies = []
    
    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°
    data_items = items_data[:max_items-1 if add_back_button else max_items]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for label, text in data_items:
        quick_replies.append({
            "content_type": "text",
            "title": label,      # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏° (max 20 characters)
            "payload": text      # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        })
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    if add_back_button:
        quick_replies.append({
            "content_type": "text",
            "title": "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö",
            "payload": "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö"
        })
    
    return quick_replies

#‡∏™‡∏£‡πâ‡∏≤‡∏á button template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö facebook (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß API login)
def create_facebook_button_template(title, buttons, subtitle=None):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Button Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Facebook Messenger
    Args:
        title: ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        buttons: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°
        subtitle: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (optional)
    Returns:
        dict: Facebook Button Template
    """
    template = {
        "attachment": {
            "type": "template",
            "payload": {
                "template_type": "button",
                "text": title,
                "buttons": buttons
            }
        }
    }
    
    if subtitle:
        template["attachment"]["payload"]["text"] = f"{title}\n{subtitle}"
    
    return template

#‡∏™‡∏£‡πâ‡∏≤‡∏á quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
def create_line_quick_reply_items(items_data, max_items=12, add_back_button=True):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° quick reply ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
    Args:
        items_data: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏∏‡πà‡∏° [(label, text), ...]
        max_items: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (default: 12)
        add_back_button: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (default: True)
    Returns:
        list: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå‡∏õ‡∏∏‡πà‡∏° quick reply
    """
    items = []
    
    # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏∏‡πà‡∏°
    data_items = items_data[:max_items-1 if add_back_button else max_items]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    for label, text in data_items:
        items.append({
            "type": "action",
            "action": {
                "type": "message",
                "label": label,  # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°
                "text": text     # ‡∏™‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô text
            }
        })
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    if add_back_button:
        items.append({
            "type": "action",
            "action": {
                "type": "message",
                "label": "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö",
                "text": "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö"
            }
        })
    
    return items

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
def create_appointment_success_flex_message(event_summary, date, time, user_name, user_email):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á LINE Flex Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    return {
        "type": "flex",
        "altText": f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡πÉ‡∏ô Calendar ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ - K. {user_name}",
        "contents": {
            "type": "bubble",
            "hero": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                        "weight": "bold",
                        "size": "xl",
                        "color": "#27AE60",
                        "align": "center"
                    }
                ],
                "backgroundColor": "#E8F8F5",
                "paddingAll": "20px",
                "spacing": "md"
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "text",
                                "text": "üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢",
                                "weight": "bold",
                                "size": "lg",
                                "color": "#2C3E50",
                                "margin": "none"
                            }
                        ],
                        "spacing": "sm",
                        "margin": "lg"
                    },
                    {
                        "type": "separator",
                        "margin": "lg"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": "üéØ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠:",
                                        "size": "sm",
                                        "color": "#7F8C8D",
                                        "flex": 2
                                    },
                                    {
                                        "type": "text",
                                        "text": event_summary,
                                        "size": "sm",
                                        "color": "#2C3E50",
                                        "flex": 5,
                                        "wrap": True,
                                        "weight": "bold"
                                    }
                                ]
                            },
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:",
                                        "size": "sm",
                                        "color": "#7F8C8D",
                                        "flex": 2
                                    },
                                    {
                                        "type": "text",
                                        "text": date,
                                        "size": "sm",
                                        "color": "#2C3E50",
                                        "flex": 5,
                                        "weight": "bold"
                                    }
                                ],
                                "margin": "sm"
                            },
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": "üïí ‡πÄ‡∏ß‡∏•‡∏≤:",
                                        "size": "sm",
                                        "color": "#7F8C8D",
                                        "flex": 2
                                    },
                                    {
                                        "type": "text",
                                        "text": f"{time} ‡∏ô.",
                                        "size": "sm",
                                        "color": "#2C3E50",
                                        "flex": 5,
                                        "weight": "bold"
                                    }
                                ],
                                "margin": "sm"
                            }
                        ],
                        "spacing": "sm",
                        "margin": "lg"
                    }
                ],
                "spacing": "md"
            },
            "footer": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "type": "text",
                        "text": "üéâ ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                        "size": "xs",
                        "color": "#95A5A6",
                        "align": "center",
                        "wrap": True
                    }
                ],
                "margin": "sm"
            }
        }
    }

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Facebook Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
def create_appointment_success_facebook_message(event_summary, date, time, user_name, user_email):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Facebook Message ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
    return {
        "text": f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ô‡∏±‡∏î‡πÉ‡∏ô Calendar ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n\nüìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:\nüéØ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {event_summary}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date}\nüïí ‡πÄ‡∏ß‡∏•‡∏≤: {time} ‡∏ô.\nüë§ Recruiter: K. {user_name}\n\nüéâ ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    }