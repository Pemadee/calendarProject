# 1. Standard Library Imports
import os
import smtplib
import sys
import threading
import time as timeTest
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime, timedelta, timezone
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


# 2. Third-Party Library Imports
import pandas as pd
from google.auth.transport.requests import Request as GoogleRequest
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread_dataframe import get_as_dataframe


# 3. Local Application Imports
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from config import CLIENT_ID, CLIENT_SECRET, SCOPES
from src.api.endpoints import *
from src.config import *
from utils.token_db import *

base_url = os.environ.get('BASE_URL')
# EMAIL_SENDER = os.getenv("EMAIL_to_SEND_MESSAGE")
# EMAIL_PASSWORD = os.getenv("PASSWORD_EMAIL")
FILE_PATH = os.path.join(os.path.dirname(__file__), '..', '..', os.getenv("FILE_PATH"))
email_locks = defaultdict(threading.Lock) # ‡∏™‡∏£‡πâ‡∏≤‡∏á lock ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏≠‡∏µ‡πÄ‡∏°‡∏•

spreadsheet_id = os.environ.get('SPREADSHEET_ID')
credentialsGsheet = os.environ.get('CREDENTIALS_GOOGLE_SHEET')
scopeGsheet = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentialsGsheet = ServiceAccountCredentials.from_json_keyfile_name(credentialsGsheet, scopeGsheet)
client = gspread.authorize(credentialsGsheet)




def is_token_valid(user_email: str) -> bool:
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å DB)"""
    t1 = timeTest.time()
    token_entry = get_token(user_email)
    if not token_entry:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email} (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {timeTest.time() - t1} s)")
        return False

    creds = Credentials(
        token=token_entry.access_token,
        refresh_token=token_entry.refresh_token,
        token_uri="https://oauth2.googleapis.com/token",
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        scopes=SCOPES
    )

    if creds.valid:
        print(f"‚úÖ Token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}(‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ {timeTest.time() - t1} s)")
        return True

    if creds.expired and creds.refresh_token:
        try:
            creds.refresh(GoogleRequest())
            update_token(
                email=user_email,
                access_token=creds.token,
                refresh_token=creds.refresh_token,
                expiry=creds.expiry
            )
            print(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {str(e)}")
            return False

    print(f"‚ùå Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ refresh_token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
    return False

def get_credentials(user_email: str):
    """‡∏£‡∏±‡∏ö credentials ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Calendar API"""
    creds = None
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• token ‡∏à‡∏≤‡∏Å DB
    token_entry = get_token(user_email)
    
    if token_entry:
        try:
            creds = Credentials(
                token=token_entry.access_token,
                refresh_token=token_entry.refresh_token,
                token_uri="https://oauth2.googleapis.com/token",
                client_id=CLIENT_ID,
                client_secret=CLIENT_SECRET,
                scopes=SCOPES
            )
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î token: {str(e)}")

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà valid ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ refresh ‡∏´‡∏£‡∏∑‡∏≠ auth ‡πÉ‡∏´‡∏°‡πà
    if not creds or not creds.valid:
        if creds:
            print(f"üòê Token expired: {creds.expired}, Has refresh_token: {bool(creds.refresh_token)}")
        if creds and creds.expired and creds.refresh_token:
            try:
                with email_locks[user_email]:
                    print(f"üîÑ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
                    creds.refresh(GoogleRequest())
                if creds.refresh_token:
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡∏ó‡∏µ‡πà‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏á DB
                    update_token(
                        email=user_email,
                        access_token=creds.token,
                        refresh_token=creds.refresh_token,
                        expiry=creds.expiry
                    )
                    print(f"‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
                else:
                    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ refresh_token ‡∏´‡∏•‡∏±‡∏á refresh ‚Äî ‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå")
            except Exception as e:
                if 'invalid_grant' in str(e):
                    print("üí• invalid_grant ‚Äî ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏•‡∏≤‡∏î ‡∏´‡∏£‡∏∑‡∏≠ token ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ")
                return _get_auth_redirect(user_email)
        else:
            print("‚ùå Token ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ refresh_token ‡πÄ‡∏•‡∏¢")
            return _get_auth_redirect(user_email)
            
    return creds

def _get_auth_redirect(user_email: str):
    flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRET_FILE, SCOPES)
    flow.redirect_uri = f"{base_url}/oauth2callback"
    auth_url, _ = flow.authorization_url(
        access_type='offline',
        prompt='consent',
        include_granted_scopes='true',
        state=user_email
    )
    return {
        "requires_auth": True,
        "auth_url": auth_url,
        "redirect_uri": flow.redirect_uri
    }

def get_calendar_events(user_email: str, calendar_id: str, start_date: str, end_date: str):
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar"""
    try:
        # ‡∏£‡∏±‡∏ö credentials
        creds = refresh_token_safe(user_email)
        if not creds:
            if not creds:
                return {
                    "email": user_email,
                    "calendar_id": calendar_id,
                    "events": [],
                    "auth_status": "expired"
                }
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Calendar API
        service = build('calendar', 'v3', credentials=creds)
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        time_min = start_date + "T00:00:00Z" if start_date else datetime.utcnow().isoformat() + "Z"
        time_max = end_date + "T23:59:59Z" if end_date else (datetime.utcnow() + timedelta(days=7)).isoformat() + "Z"
        
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email} ‡∏à‡∏≤‡∏Å {time_min} ‡∏ñ‡∏∂‡∏á {time_max}")
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        events_result = service.events().list(
            calendarId=calendar_id,
            timeMin=time_min,
            timeMax=time_max,
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        
        events = events_result.get('items', [])
        print(f"‡∏û‡∏ö {len(events)} ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        formatted_events = []
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            end = event['end'].get('dateTime', event['end'].get('date'))
            
            formatted_events.append({
                'id': event['id'],
                'summary': event.get('summary', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°'),
                'start': start,
                'end': end,
                'creator': event.get('creator', {}),
                'attendees': event.get('attendees', []),
                'status': event.get('status', 'confirmed'),
                'location': event.get('location', ''),
                'description': event.get('description', '')
            })
        
        return {
            'email': user_email,
            'calendar_id': calendar_id,
            'events': formatted_events,
            'auth_status': 'authenticated'
        }
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}: {str(e)}")
        return {
            'email': user_email,
            'calendar_id': calendar_id,
            'events': [],
            'error': str(e),
            'auth_status': 'error'
        }

def add_location_column(df):
    """
    ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Location ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á (df)
    ‡πÇ‡∏î‡∏¢‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á Email ‡πÄ‡∏õ‡πá‡∏ô NaN
    """
    curr_loc = None          # ‡πÄ‡∏Å‡πá‡∏ö location ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    loc_list = []            # ‡∏à‡∏∞‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà

    for _, row in df.iterrows():
        if pd.isna(row['Email']):        # ‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
            curr_loc = row['Name']       # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï location
        loc_list.append(curr_loc)        # ‡πÄ‡∏ï‡∏¥‡∏° loc ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ô‡∏±‡πâ‡∏ô

    df['Location'] = loc_list
    return df

# def get_people(file_path,
#                location=None,
#                english_min=None,
#                exp_kind=None,
#                age_key=None):
#     """
#     ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
#     ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠‚Äë‡∏≠‡∏µ‡πÄ‡∏°‡∏•‚Äë‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ï M ‡πÅ‡∏•‡∏∞ R
#     """
    
#     # ---------- 1) ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï ----------
#     sheets = pd.read_excel(file_path, sheet_name=None)
#     df_M = sheets['M'].copy()
#     df_R = sheets['R'].copy()

#     # ---------- 2) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Name ----------
#     df_M.rename(columns={df_M.columns[0]: 'Name'}, inplace=True)
#     df_R.rename(columns={df_R.columns[0]: 'Name'}, inplace=True)

#     # ---------- 3) ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Location ----------
#     df_M = add_location_column(df_M)
#     df_R = add_location_column(df_R)

#     # ---------- 4) ‡∏ï‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô (Email ‡πÄ‡∏õ‡πá‡∏ô NaN) ----------
#     df_M = df_M[df_M['Email'].notna()].reset_index(drop=True)
#     df_R = df_R[df_R['Email'].notna()].reset_index(drop=True)

#     # ---------- 5) ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Location ----------
#     if location:
#         df_M = df_M[df_M['Location'].str.contains(location, case=False, na=False)]
#         df_R = df_R[df_R['Location'].str.contains(location, case=False, na=False)]

#     # ---------- 6) ‡∏Å‡∏£‡∏≠‡∏á English ----------
#     if english_min is not None and 'English' in df_M.columns:
#         df_M['Eng_num'] = pd.to_numeric(df_M['English'], errors='coerce')
#         df_M = df_M[df_M['Eng_num'] >= english_min]

#     # ---------- 7) ‡∏Å‡∏£‡∏≠‡∏á Experience ----------
#     if exp_kind and 'Experience' in df_M.columns:
#         exp_low = df_M['Experience'].str.lower()
#         if exp_kind.lower() == 'strong':
#             cond = exp_low.str.contains('strong', na=False) & \
#                    ~exp_low.str.contains('non', na=False)
#             df_M = df_M[cond]
#         else:
#             df_M = df_M[exp_low.str.contains(exp_kind.lower(), na=False)]

#     # ---------- 8) ‡∏Å‡∏£‡∏≠‡∏á Age ----------
#     if age_key and 'Age' in df_M.columns:
#         try:
#             age_value = int(age_key)
            
#             # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
#             numeric_mask = pd.to_numeric(df_M['Age'], errors='coerce').notna()  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ
#             age_filter_mask = pd.to_numeric(df_M['Age'], errors='coerce') < age_value  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ age_key
            
#             # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤ Age ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ age_key
#             df_M = df_M[numeric_mask & age_filter_mask]
            
#             # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏° "all" ‡πÉ‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ
#             # all_mask = df_M['Age'].astype(str).str.lower() == 'all'
#             # df_M = pd.concat([df_M, df_M_original[all_mask]])
            
#         except (ValueError, TypeError):
#             print(f"Warning: age_key '{age_key}' is not a valid number")
    
    
#     # ---------- 9) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (dict ‚Üí list ‡∏Ç‡∏≠‡∏á dict) ----------
#     list_M = (
#         df_M[['Name', 'Email', 'Location']]
#         .to_dict(orient='records')
#     )
#     list_R = (
#         df_R[['Name', 'Email', 'Location']]
#         .to_dict(orient='records')
#     )
    
#     return {'M': list_M, 'R': list_R}

def get_people(location=None,
                     english_min=None,
                     exp_kind=None,
                     age_key=None):
    """
    ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏∑‡πà‡∏≠‚Äë‡∏≠‡∏µ‡πÄ‡∏°‡∏•‚Äë‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ï M ‡πÅ‡∏•‡∏∞ R
    """
    
    
    
    # ---------- 1) ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets API ----------
    # ‡πÄ‡∏õ‡∏¥‡∏î‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï‡∏à‡∏≤‡∏Å ID
    sheet = client.open_by_key(spreadsheet_id)
    
    # ---------- 2) ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏∏‡∏Å‡∏ä‡∏µ‡∏ï ----------
    worksheet_M = sheet.worksheet('M')
    worksheet_R = sheet.worksheet('R')
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô DataFrame
    df_M = get_as_dataframe(worksheet_M, evaluate_formulas=True, skiprows=0)
    df_R = get_as_dataframe(worksheet_R, evaluate_formulas=True, skiprows=0)
    
    # ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô NaN ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
    df_M = df_M.dropna(how='all').reset_index(drop=True)
    df_R = df_R.dropna(how='all').reset_index(drop=True)

    # ---------- 3) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Name ----------
    df_M.rename(columns={df_M.columns[0]: 'Name'}, inplace=True)
    df_R.rename(columns={df_R.columns[0]: 'Name'}, inplace=True)

    # ---------- 4) ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Location ----------
    df_M = add_location_column(df_M)
    df_R = add_location_column(df_R)

    # ---------- 5) ‡∏ï‡∏±‡∏î‡πÅ‡∏ñ‡∏ß‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô (Email ‡πÄ‡∏õ‡πá‡∏ô NaN) ----------
    df_M = df_M[df_M['Email'].notna()].reset_index(drop=True)
    df_R = df_R[df_R['Email'].notna()].reset_index(drop=True)

    # ---------- 6) ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Location ----------
    if location:
        df_M = df_M[df_M['Location'].str.contains(location, case=False, na=False)]
        df_R = df_R[df_R['Location'].str.contains(location, case=False, na=False)]

    # ---------- 7) ‡∏Å‡∏£‡∏≠‡∏á English ----------
    if english_min is not None and 'English' in df_M.columns:
        df_M['Eng_num'] = pd.to_numeric(df_M['English'], errors='coerce')
        df_M = df_M[df_M['Eng_num'] >= english_min]

    # ---------- 8) ‡∏Å‡∏£‡∏≠‡∏á Experience ----------
    if exp_kind and 'Experience' in df_M.columns:
        exp_low = df_M['Experience'].str.lower()
        if exp_kind.lower() == 'strong':
            cond = exp_low.str.contains('strong', na=False) & \
                   ~exp_low.str.contains('non', na=False)
            df_M = df_M[cond]
        else:
            df_M = df_M[exp_low.str.contains(exp_kind.lower(), na=False)]

    # ---------- 9) ‡∏Å‡∏£‡∏≠‡∏á Age ----------
    if age_key and 'Age' in df_M.columns:
        try:
            age_value = int(age_key)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            numeric_mask = pd.to_numeric(df_M['Age'], errors='coerce').notna()  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ
            age_filter_mask = pd.to_numeric(df_M['Age'], errors='coerce') < age_value  # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏≤‡∏¢‡∏∏‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ age_key
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤ Age ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ age_key
            df_M = df_M[numeric_mask & age_filter_mask]
            
        except (ValueError, TypeError):
            print(f"Warning: age_key '{age_key}' is not a valid number")
    
    
    # ---------- 10) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (dict ‚Üí list ‡∏Ç‡∏≠‡∏á dict) ----------
    list_M = (
        df_M[['Name', 'Email', 'Location']]
        .to_dict(orient='records')
    )
    list_R = (
        df_R[['Name', 'Email', 'Location']]
        .to_dict(orient='records')
    )
    
    return {'M': list_M, 'R': list_R}

def is_available(events, start_time, end_time):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    """
    for event in events:
        event_start = parse_event_time(event['start'].get('dateTime', event['start'].get('date')))
        event_end = parse_event_time(event['end'].get('dateTime', event['end'].get('date')))
        
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
        if (start_time < event_end and end_time > event_start):
            return False
    return True

def parse_event_time(time_str):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô datetime object
    """
    if 'T' in time_str:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤ (dateTime)
        if time_str.endswith('Z'):
            return datetime.fromisoformat(time_str.replace('Z', '+00:00'))
        else:
            return datetime.fromisoformat(time_str)
    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (date)
        dt = datetime.strptime(time_str, '%Y-%m-%d')
        return dt.replace(tzinfo=timezone.utc)

# def send_notification_email(receiver_email: str, subject: str, body: str):
#     try:
#         msg = MIMEMultipart()
#         msg['From'] = EMAIL_SENDER
#         msg['To'] = receiver_email
#         msg['Subject'] = subject

#         msg.attach(MIMEText(body, 'plain'))

#         # ‡πÉ‡∏ä‡πâ Gmail SMTP Server
#         with smtplib.SMTP('smtp.gmail.com', 587) as server:
#             server.starttls()
#             server.login(EMAIL_SENDER, EMAIL_PASSWORD)
#             server.send_message(msg)
        
#         print(f"‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á {receiver_email}")
#     except Exception as e:
#         print(f"‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")

def get_day_suffix(day):
    if 11 <= day <= 13:
        return 'th'
    last_digit = day % 10
    if last_digit == 1:
        return 'st'
    elif last_digit == 2:
        return 'nd'
    elif last_digit == 3:
        return 'rd'
    else:
        return 'th'

def refresh_token_safe(user_email: str):
    token_entry = get_token(user_email)
    if not token_entry:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
        return None

    creds = Credentials(
        token=token_entry.access_token,
        refresh_token=token_entry.refresh_token,
        token_uri="https://oauth2.googleapis.com/token",
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        scopes=SCOPES
    )

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ expiry ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    need_refresh = False
    if not creds.expiry:
        need_refresh = True
        print(f"‚ö†Ô∏è Token ‡∏Ç‡∏≠‡∏á {user_email} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ expiry ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
    elif creds.expired:
        need_refresh = True
        print(f"‚ö†Ô∏è Token ‡∏Ç‡∏≠‡∏á {user_email} ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
    elif (creds.expiry - datetime.utcnow()).total_seconds() < 300:
        need_refresh = True
        seconds_left = (creds.expiry - datetime.utcnow()).total_seconds()
        print(f"‚ö†Ô∏è Token ‡∏Ç‡∏≠‡∏á {user_email} ‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÉ‡∏ô {int(seconds_left)} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä")
    
    if need_refresh:
        try:
            creds.refresh(GoogleRequest())
            update_token(
                email=user_email,
                access_token=creds.token,
                refresh_token=creds.refresh_token,
                expiry=creds.expiry
            )
            print(f"‚úÖ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user_email}")
        except Exception as e:
            print(f"‚ùå ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}")
            return None
    else:
        print(f"‚úÖ Token ‡∏Ç‡∏≠‡∏á {user_email} ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")

    return creds

def find_emails_from_name_pair(name_pair, location):
    """
    ‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "name1-name2" ‡πÅ‡∏•‡∏∞ location ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å Excel
    
    Args:
        name_pair (str): ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "name1-name2"
        location (str): ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà ‡πÄ‡∏ä‡πà‡∏ô "Silom", "Asoke" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
        
    Returns:
        dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ name1_email, name2_email, name1, name2
    """
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
    try:
        # ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á
        
        sheet = client.open_by_key(spreadsheet_id)
        worksheet_M = sheet.worksheet('M')
        worksheet_R = sheet.worksheet('R')

        

        
        # ‡πÅ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠
        try:
            name1, name2 = name_pair.split('-')
        except ValueError:
            raise ValueError(f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {name_pair} (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 'name1-name2')")
        

        df_m = get_as_dataframe(worksheet_M, evaluate_formulas=True, skiprows=0)
        df_r = get_as_dataframe(worksheet_R, evaluate_formulas=True, skiprows=0)
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï M
        email1 = None
        for i in range(len(df_m)):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ location ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if df_m.iloc[i, 0] == location:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÜ ‡πÑ‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠ location ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                j = i + 1
                while j < len(df_m) and not pd.isna(df_m.iloc[j, 0]) and not df_m.iloc[j, 0] in ["Silom", "Asoke", "Phuket", "Pattaya", "Samui", "Huahin", "Chiangmai"]:
                    if df_m.iloc[j, 0] == name1:
                        # ‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Email
                        if 'Email' in df_m.columns:
                            email_col_idx = df_m.columns.get_loc('Email')
                            email1 = df_m.iloc[j, email_col_idx]
                            if pd.isna(email1):
                                raise ValueError(f"‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠ {name1} ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
                            break
                    j += 1
                break
        
        if email1 is None:
            raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ {name1} ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà {location} ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï M")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï R
        email2 = None
        for i in range(len(df_r)):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ location ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if df_r.iloc[i, 0] == location:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÜ ‡πÑ‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠ location ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                j = i + 1
                while j < len(df_r) and not pd.isna(df_r.iloc[j, 0]) and not df_r.iloc[j, 0] in ["Silom", "Asoke", "Phuket", "Pattaya", "Samui", "Huahin", "Chiangmai"]:
                    if df_r.iloc[j, 0] == name2:
                        # ‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Email
                        if 'Email' in df_r.columns:
                            email_col_idx = df_r.columns.get_loc('Email')
                            email2 = df_r.iloc[j, email_col_idx]
                            if pd.isna(email2):
                                raise ValueError(f"‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠ {name2} ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•")
                            break
                    j += 1
                break
        
        if email2 is None:
            raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ {name2} ‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà {location} ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï R")
        
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        return {
            "name1_email": email1,
            "name2_email": email2,
            "name1": name1,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list
            "name2": name2   # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô list
        }
        
    except Exception as e:
        raise Exception(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel: {str(e)}")

def convert_to_iso_format(date, time):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO
    
    Args:
        date (str): ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "YYYY-MM-DD"
        time (str): ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "HH:MM-HH:MM"
        
    Returns:
        tuple: (start_time, end_time) ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO format
    """
    try:
        # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î
        start_time, end_time = time.split('-')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á datetime objects
        start_datetime = f"{date}T{start_time}:00+07:00"
        end_datetime = f"{date}T{end_time}:00+07:00"
        
        return start_datetime, end_datetime
    except Exception as e:
        raise ValueError(f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}")










